"""
    将面向过程的购物车, 改为面向对象的购物车
    商品如下:
        101: {"name": "屠龙刀", "price": 10000},
        102: {"name": "倚天剑", "price": 10000},
        103: {"name": "九阴白骨爪", "price": 8000},
        104: {"name": "九阳神功", "price": 9000},
        105: {"name": "降龙十八掌", "price": 8000},
        106: {"name": "乾坤大挪移", "price": 10000},
"""


class CommodityModel:
    """
        商品数据模型，包含id, name, price
    """
    def __init__(self, name="", price=0.0, inventory=0, commodity_id=0):
        """
            创建商品对象
        :param name: 商品名称 str
        :param price: 商品价格 float
        :param inventory: 商品库存 int
        :param commodity_id: 商品唯一标示 int
        """
        self.name = name
        self.price = price
        self.inventory = inventory
        self.id = commodity_id

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, value):
        self.__name = value

    @property
    def price(self):
        return self.__price

    @price.setter
    def price(self, value):
        self.__price = value
    
    @property
    def inventory(self):
        return self.__inventory

    @inventory.setter
    def inventory(self, value):
        if value < 0:
            raise ValueError()
        self.__inventory = value
    


commodity_database = []


class CommodityController:
    """
        迪米特法则
    """
    def __init__(self):
        self.__com_list = commodity_database

    @property
    def com_list(self):
        return self.__com_list

    def add_commodity(self, commodity_info):
        raise NotImplementedError()

    def update_inventory(self, value, count):
        raise NotImplementedError()

    def match_inventory_under(self, value):
        raise NotImplementedError()

    def match_inventory_greater(self, value):
        raise NotImplementedError()

    def match_inventory_equality(self, value):
        raise NotImplementedError()

    def match_price_under(self, value):
        raise NotImplementedError()

    def match_price_greater(self, value):
        raise NotImplementedError()

    def match_price_equality(self, value):
        raise NotImplementedError()

    def search_id(self, value):
        raise NotImplementedError()

    def search_name(self, value):
        raise NotImplementedError()

    def remove_com(self, value):
        raise NotImplementedError()


class CommodityManagerController(CommodityController):
    """
        商品管理控制器，负责业务逻辑处理
    """
    __init_id = 100

    def __init__(self):
        super().__init__()

    def add_commodity(self, commodity_info):
        """
            将商品数据加入数据库中
        :param commodity_info: 带有默认商品id(0)的商品对象
        """
        commodity_info.id = self.__generate_id()
        self.com_list.append(commodity_info)

    def __generate_id(self):
        """
            将商品信息中的默认id替换成新生成的id
        :return: 新生成的id
        """
        CommodityManagerController.__init_id += 1
        return CommodityManagerController.__init_id

    def update_inventory(self, value, count):
        """
            修改库存
        :param value: id
        :param count: 修改数量
        :return: True 修改成功, False 修改失败
        """
        commodity = self.search_id(value)
        if commodity and commodity.inventory + count > 0:
            commodity.inventory += count
            return True
        return False

    def match_inventory_under(self, value):
        """
            盘点库存小于要求
        :param value: 库存值 int
        """
        for commodity in ListHelper.search_all(self.com_list, lambda item: item.inventory < value):
            yield commodity

    def match_inventory_greater(self, value):
        """
            盘点库存大于要求
        :param value: 库存值 int
        """
        for commodity in ListHelper.search_all(self.com_list, lambda item: item.inventory > value):
            yield commodity

    def match_inventory_equality(self, value):
        """
            盘点库存等于要求
        :param value: 库存值 int
        """
        for commodity in ListHelper.search_all(self.com_list, lambda item: item.inventory == value):
            yield commodity

    def match_price_under(self, value):
        """
            匹配价格小于要求
        :param value: 值 int
        """
        for commodity in ListHelper.search_all(self.com_list, lambda item: item.price < value):
            yield commodity

    def match_price_greater(self, value):
        """
            匹配价格大于要求
        :param value: 值 int
        """
        for commodity in ListHelper.search_all(self.com_list, lambda item: item.price > value):
            yield commodity

    def match_price_equality(self, value):
        """
            匹配价格等于要求
        :param value: 值 int
        """
        for commodity in ListHelper.search_all(self.com_list, lambda item: item.price == value):
            yield commodity

    def search_id(self, value):
        """
            根据id在数据库中查找是否有商品
        :param value: id
        :return: 返回相关id结果
        """
        return ListHelper.search_single(self.com_list, lambda item: item.id == value)

    def search_name(self, value):
        """
            根据条件搜索相关, 目前view中没有相关搜索需求, 先放着
        :param value: 条件
        :return: 成功就返回相关结果, False 没有相关结果
        """
        for commodity in ListHelper.search_all(self.com_list, lambda item: item.name == value):
            yield commodity
        return False

    def remove_com(self, value):
        """
            根据id删除相关商品
        :param value: id
        :return: True 删除成功, False 删除失败
        """
        commodity = self.search_id(value)
        if commodity:
            self.com_list.remove(commodity)
            return True
        return False


class ShoppingCarModel:
    """
        购物车数据模型，包含id, name, price, count
    """
    def __init__(self, name="", price=0.0, count=0, commodity_id=0):
        """
            添加购物车商品对象
        :param name: 商品名称 str
        :param price: 商品价格 float
        :param count: 商品购买数量 int
        :param commodity_id: 商品唯一标示 int
        """
        self.name = name
        self.price = price
        self.count = count
        self.id = commodity_id

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, value):
        self.__name = value

    @property
    def price(self):
        return self.__price

    @price.setter
    def price(self, value):
        self.__price = value

    @property
    def count(self):
        return self.__count

    @count.setter
    def count(self, value):
        self.__count = value



car_database = []


class ShoppingCarController:
    """
        卧槽！这是迪米特法则的具体体现吗？
    """
    def __init__(self):
        self.__car_list = car_database
        self.__com_manager = CommodityManagerController()

    @property
    def car_list(self):
        return self.__car_list

    @property
    def com_manager(self):
        return self.__com_manager

    def add_in_car(self, com_id, count=1):
        raise NotImplementedError()

    def update_in_car(self, com_id, count=1):
        raise NotImplementedError()

    def search_id_in_car(self, value):
        raise NotImplementedError()

    def close_an_account(self):
        raise NotImplementedError()

    def pay_money(self, money=0):
        raise NotImplementedError()


class ShoppingCarManagerController(ShoppingCarController):
    """
        购物车管理控制器，负责业务逻辑处理
    """
    def __init__(self):
        super().__init__()

    def add_in_car(self, com_id, count=1):
        """
            按照id 添加进购物车列表
        :param com_id: id int
        :param count: 购买的数量
        """
        car_commodity = self.search_id_in_car(com_id)
        commodity = self.com_manager.search_id(com_id)
        if car_commodity:
            return self.__add_old_com(car_commodity, com_id, count)
        if commodity:
            return self.__add_new_com(commodity, com_id, count)
        return False

    def __add_new_com(self, commodity, com_id, count):
        """
            当购物车中没有相同id的商品时, 往购物车内新增该商品, 同时向库中请求减去相同id商品的库存
        """
        shopping = ShoppingCarModel()
        shopping.name, shopping.price, shopping.count, shopping.id = commodity.name, commodity.price, count, commodity.id
        self.car_list.append(shopping)
        self.com_manager.update_inventory(com_id, -count)
        return True

    def __add_old_com(self, car_commodity, com_id, count):
        """
            当购物车内有相同id的商品时, 往累加数量, 同时向库中请求减去相同id商品的库存
        """
        car_commodity.count += count
        self.com_manager.update_inventory(com_id, -count)
        return True

    def update_in_car(self, com_id, count=1):
        """
            根据商品id在购物车中移除对应数量的商品
        :param com_id: 商品id int
        :param count: 移除这个id的商品个数 int
        :return: True 操作成功, False 操作失败
        """
        for commodity in self.car_list:
            if commodity.id == com_id:
                commodity.count -= count
                if commodity.count == 0:
                    self.__del_in_car(com_id)
                self.com_manager.update_inventory(com_id, count)
                return True
        return False

    def __del_in_car(self, value):
        """
            根据条件删除购物车中的商品
        :param value:
        :return: True 操作成功, False 操作失败
        """
        for commodity in ListHelper.search_all(self.car_list, lambda item: item.id == value):
            self.car_list.remove(commodity)
            return True
        return False

    def search_id_in_car(self, value):
        """
            根据id在购物车库中查找是否有商品
        :param value: id
        """
        return ListHelper.search_single(self.car_list, lambda item: item.id == value)

    def close_an_account(self):
        """
            合计购物车的总金额
        :return: aggregate 总金额
        """
        aggregate = 0
        for commodity in self.car_list:
            aggregate += commodity.price * commodity.count
        return aggregate

    def pay_money(self, money=0):
        """
            支付
        :param money: 支付的金额 int
        :return: -1 支付失败金额不足, 0 支付成功金额正好, 剩余的就是支付成功且找零
        """
        aggregate = self.close_an_account()
        if money - aggregate > 0:
            return money - aggregate
        elif money - aggregate < 0:
            return -1
        elif money - aggregate == 0:
            return 0


class Error:
    """
        错误父类
    """
    def __init__(self, message01, message02):
        """
            相关内容
        :param message01: 输入的内容
        :param message02: 提示的内容
        """
        self.message01 = message01
        self.message02 = message02

    @property
    def message01(self):
        return self.__message01

    @message01.setter
    def message01(self, value):
        self.__message01 = value

    @property
    def message02(self):
        return self.__message02

    @message02.setter
    def message02(self, value):
        self.__message02 = value

    def report_an_error(self):
        raise NotImplementedError()


class MessageError(Error):
    """
        信息输入验证
    """
    def __init__(self, message01, message02, target_type):
        """
            相关内容
        :param message01: 输入的内容
        :param message02: 提示的内容
        :param target_type: 需要转换的类型, str型 输入的为"int" or "float"
        """
        super().__init__(message01, message02)
        self.target_type = target_type

    @property
    def target_type(self):
        return self.__target_type

    @target_type.setter
    def target_type(self, value):
        if value not in ("int", "float"):
            raise ValueError("让传 'int' or 'float' 就要听话")
        self.__target_type = value

    def report_an_error(self):
        """
            验证相关信息
        """
        while True:
            message = input(self.message01)
            try:
                message = eval(self.target_type)(message)
            except Exception:
                print(self.message02)
                continue
            return message


class KeyError(Error):
    """
        按键信息验证
    """
    def __init__(self, message01, message02, message03):
        """
            相关内容
        :param message01: 输入的内容
        :param message02: 提示的内容
        :param message03: 传入一个键值元组 or 列表，元素为str型
        """
        super().__init__(message01, message02)
        self.message03 = message03
        
    @property
    def message03(self):
        return self.__message03

    @message03.setter
    def message03(self, value):
        self.__message03 = value

    def report_an_error(self):
        """
            验证相关信息
        """
        while True:
            key = input(self.message01)
            try:
                self.__find_content(key)
            except Exception:
                print(self.message02)
                continue
            return key
    
    def __find_content(self, key):
    """
        查找输入的值是否在相关范围内
    """
    if key not in self.message03:
        raise ValueError


class ValueMinusError(Error):
    """
        验证数值大小错误
    """
    def __init__(self, message01, message02):
        super().__init__(message01, message02, target_type)
        self.target_type = target_type

    def report_an_error(self):
        """
            验证相关信息
        """
        while True:
            value = input(self.message01)
            try:
                value = eval(self.target_type)(value)
                value = int(value)
                if value < 0:
                    raise ValueError()
            except Exception:
                print(self.message02)
                continue
            return value


class ListHelper:
    """
        列表助手类
    """
    @staticmethod
    def search_all(list_target, func_condition):
        """
            通用的查找某个条件的所有元素方法
        :param list_target: 需要查找的列表
        :param func_condition: 需要查找的条件, 函数类型
                    函数名(参数) --> bool
        :return: 需要查找的元素
        """
        for item in list_target:
            if func_condition(item):
                yield item

    @staticmethod
    def search_single(list_target, func_condition):
        """
            通用的查找某个条件的唯一或第一个元素方法
        :param list_target: 需要查找的列表
        :param func_condition: 需要查找的条件, 函数类型
                    函数名(参数) --> bool
        :return: 需要查找的一个元素
        """
        for item in list_target:
            if func_condition(item):
                return item

    @staticmethod
    def match_price_equality(item, value):
        """
            匹配价格相等要求
        :param item: 对象
        :param value: 匹配相关值
        :return: bool值
        """
        return item.price == value

    @staticmethod
    def match_price_under(item, value):
        """
            匹配价格小于要求
        :param item: 对象
        :param value: 匹配相关值
        :return: bool值
        """
        return item.price < value

    @staticmethod
    def match_price_greater(item, value):
        """
            匹配价格大于要求
        :param item: 对象
        :param value: 匹配相关值
        :return: bool值
        """
        return item.price > value


class CommodityManagerView:
    """
        商品管理视图
    """
    def __init__(self):
        self.__com_manager = CommodityManagerController()

    def __display_menu(self):
        """
            菜单
        """
        print()
        print("1、添加商品")
        print("2、查看商品")
        print("3、盘点库存")
        print("4、修改库存")
        print("5、删除商品")
        print("q、退出")
        print()

    def __select_menu(self):
        """
            输入快捷键
        """
        item = KeyError("输入菜单快捷键:", "提示:输入的键值不符合要求!", ("1", "2", "3", "4", "5", "q", "Q")).report_an_error()
        if item == "1":
            self.__input_commodity()
        elif item == "2":
            self.__output_commodity(self.__com_manager.com_list)
        elif item == "3":
            self.__check_inventory()
        elif item == "4":
            self.__update_inventory()
        elif item == "5":
            self.__delete_commodity()
        elif item == "q" or item == "Q":
            return -1

    def main(self):
        """
            商品录入后台入口
        """
        while True:
            self.__display_menu()
            if self.__select_menu() == -1:
                print("退出商品录入后台")
                break

    def __input_commodity(self):
        """
            添加商品
        """
        name = input("输入商品名称:")
        price = ValueMinusError("输入商品价格:", "提示:商品价格输入有误!", "float").report_an_error()
        inventory = ValueMinusError("输入商品库存:", "提示:商品库存输入有误!", "int").report_an_error()
        commodity = CommodityModel(name, price, inventory)
        self.__com_manager.add_commodity(commodity)

    def __output_commodity(self, target_list):
        """
            输出商品列表
        """
        for commodity in target_list:
            self.__print_commodity(commodity)

    def __check_inventory(self):
        """
            盘点小于要求的库存商品
        """
        inventory = ValueMinusError("输入库存小于多少的商品:", "提示:数值输入有误!", "int").report_an_error()
        iterator = self.__com_manager.match_inventory_under(inventory)
        for commodity in iterator:
            self.__print_commodity(commodity)

    def __update_inventory(self):
        """
            根据商品编号在数据库中修改库存
        """
        com_id = self.__check_id()
        count = MessageError("输入修改数量:", "提示:修改数量输入有误!", "int").report_an_error()
        if self.__com_manager.update_inventory(com_id, count):
            print("修改成功！")
        else:
            print("修改失败！")

    def __delete_commodity(self):
        """
            根据商品编号在数据库中移除商品
        """
        com_id = self.__check_id()
        if self.__com_manager.remove_com(com_id):
            print("移除成功！")
        else:
            print("移除失败！")

    def __check_id(self):
        """
            核对输入的商品id是否存在于数据库中
        """
        while True:
            com_id = MessageError("输入商品编号:", "提示:商品编号输入有误!", "int").report_an_error()
            if self.__com_manager.search_id(com_id):
                return com_id
            print("提示:商品编号不存在!")

    def __print_commodity(self, commodity):
        """
            打印商品
        """
        print(commodity.id, commodity.name, commodity.price, commodity.inventory)


class ShoppingCarView:
    """
        购物车管理视图
    """
    def __init__(self):
        self.__car_manager = ShoppingCarManagerController()

    def __display_menu(self):
        """
            菜单
        """
        print()
        print("1、将商品添加到购物车")
        print("2、将商品从购物车中移除")
        print("3、查看购物车")
        print("4、结算")
        print("5、支付")
        print("q、退出")
        print()

    def __select_menu(self):
        """
            输入快捷键
        """
        item = KeyError("输入菜单快捷键:", "提示:输入的键值不符合要求!", ("1", "2", "3", "4", "5", "q", "Q")).report_an_error()
        if item == "1":
            self.__add_shopping_car()
        elif item == "2":
            self.__update_shopping_car()
        elif item == "3":
            self.__output_shopping_car(self.__car_manager.car_list)
        elif item == "4":
            self.__total_money()
        elif item == "5":
            self.__pay()
        elif item == "q" or item == "Q":
            return -1

    def main(self):
        """
            购物车入口
        """
        while True:
            self.__display_menu()
            if self.__select_menu() == -1:
                print("退出购物车")
                break

    def __add_shopping_car(self):
        """
            添加购物车
        """
        com_id = self.__check_id_in_commodity()
        count = ValueMinusError("输入购买数量:", "提示:购买数量输入有误!", "int").report_an_error()
        if self.__car_manager.add_in_car(com_id, count):
            print("添加成功！")
        else:
            print("添加失败！")

    def __update_shopping_car(self):
        """
            根据商品编号从购物车中移除商品相应数量的商品
        """
        com_id = self.__check_id_in_car()
        count = ValueMinusError("输入移除数量:", "提示:移除数量输入有误!", "int").report_an_error()
        if self.__car_manager.update_in_car(com_id, count):
            print("移除成功！")
        else:
            print("移除失败！")

    def __check_id_in_commodity(self):
        """
            核对输入的商品id是否在商品列表中
        """
        while True:
            com_id = MessageError("输入商品编号:", "提示:商品编号输入有误!", "int").report_an_error()
            if CommodityManagerController().search_id(com_id):
                return com_id
            print("提示:商品编号不存在!")

    def __check_id_in_car(self):
        """
            核对输入的商品id是否存在于购物车中
        """
        while True:
            com_id = MessageError("输入商品编号:", "提示:商品编号输入有误!", "int").report_an_error()
            if self.__car_manager.search_id_in_car(com_id):
                return com_id
            print("提示:商品编号不在购物车内!")

    def __output_shopping_car(self, target_list):
        """
            输出购物车列表
        """
        for shopping_car in target_list:
            print(shopping_car.id, shopping_car.name, shopping_car.price, shopping_car.count)

    def __total_money(self):
        """
            输出结算金额
        """
        money = self.__car_manager.close_an_account()
        if money > 0:
            print("合计:%.2f" % money)
        else:
            print("购物车为空！")

    def __pay(self):
        """
            输入支付金额查看支付结果
        """
        if self.__car_manager.close_an_account():
            pay_money = ValueMinusError("输入支付金额:", "提示:支付金额输入有误!", "float").report_an_error()
            if self.__car_manager.pay_money(pay_money) == 0:
                print("支付成功！")
            elif self.__car_manager.pay_money(pay_money) == -1:
                print("支付失败，金额不足！")
            else:
                print("支付成功，找零%.2f" % self.__car_manager.pay_money(pay_money))
        else:
            print("未购买任何商品！")


class NavigationView:
    """
        导航视图
    """
    def __init__(self):
        self.__commodity_main = CommodityManagerView()
        self.__shopping_car_main = ShoppingCarView()

    def __display_menu(self):
        """
            菜单
        """
        print()
        print("1、进入后台添加商品")
        print("2、进入购物车列表")
        print("q、退出")
        print()

    def __select_menu(self):
        """
            输入快捷键
        """
        item = KeyError("请输入菜单快捷键:", "提示:输入的键值不符合要求!", ("1", "2", "q", "Q")).report_an_error()
        if item == "1":
            self.__commodity_main.main()
        elif item == "2":
            self.__shopping_car_main.main()
        elif item == "q" or item == "Q":
            return -1

    def main(self):
        """
            总入口
        """
        while True:
            self.__display_menu()
            if self.__select_menu() == -1:
                print("退出")
                break


if __name__ == "__main__":
    view = NavigationView()
    view.main()





