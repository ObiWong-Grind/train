"""
    password 生成，根据相应的条件生成密码。
"""

"""
    password的密码生成模块，根据相应的条件生成密码。以后生成密码就用这个
"""

import random, string


class SymbolPool:
    def __init__(self):
        self.__symbol_pool = "!#$%&\'\"()*+,-./:;<=>?@[]^_`{|}~"

    @property
    def symbol_pool(self):
        return self.__symbol_pool


class PasswordManagerController:
    """
        密码内容生成控制器
    """
    def __init__(self):
        self.__manager = eval("SymbolPool()")

    @property
    def manager(self):
        return self.__manager

    def generate(self):
        raise NotImplementedError()


class NumberGenerateController(PasswordManagerController):
    """
        生成数字密码列表
    """
    def __init__(self, number):
        super().__init__()
        self.number = number

    @property
    def number(self):
        return self.__number

    @number.setter
    def number(self, value):
        self.__number = value

    def generate(self):
        """
            随机生成对应值的数字加入列表
        :return: 返回一个含有要求位数的数字列表
        """
        number_list = []
        for n in range(self.number):
            number_list.append(random.choice(string.digits))
        return number_list


class SymbolGenerateController(PasswordManagerController):
    """
        生成特殊字符密码列表
    """
    def __init__(self, number):
        super().__init__()
        self.number = number

    @property
    def number(self):
        return self.__number

    @number.setter
    def number(self, value):
        self.__number = value

    def generate(self):
        """
            随机生成对应值的特殊字符加入列表
        :return: 返回一个含有要求位数的特殊字符列表
        """
        symbol_list = []
        for s in range(self.number):
            symbol_list.append(random.choice(super().manager.symbol_pool))
        return symbol_list


class AlphaGenerateController(PasswordManagerController):
    """
        生成大小写英文字母密码列表
    """
    def __init__(self, number):
        super().__init__()
        self.number = number

    @property
    def number(self):
        return self.__number

    @number.setter
    def number(self, value):
        self.__number = value

    def generate(self):
        """
            随机生成对应值的大小写英文字母加入列表
        :return: 返回一个含有要求位数的小写英文字母列表
        """
        alpha_list = []
        for s in range(self.number):
            alpha_list.append(random.choice(string.ascii_letters))
        return alpha_list


class PasswordController:
    """
        密码合成控制器
    """
    def __init__(self, sum_number=4, number=0, symbol=0):
        self.sum_number = sum_number
        self.number = number
        self.symbol = symbol
        self.__password_config = self.__generate_password()

    @property
    def sum_number(self):
        return self.__sum_number

    @sum_number.setter
    def sum_number(self, value):
        self.__sum_number = value

    @property
    def number(self):
        return self.__number

    @number.setter
    def number(self, value):
        self.__number = value

    @property
    def symbol(self):
        return self.__symbol

    @symbol.setter
    def symbol(self, value):
        self.__symbol = value

    def __generate_password(self):
        """
            生成数字、字符、字母配置文件, 之后独立出去
        """
        if self.sum_number >= self.number + self.symbol:
            result_list = ["NumberGenerateController(%d)" % self.number, "SymbolGenerateController(%d)" % self.symbol,
                           "AlphaGenerateController(%d)" % (self.sum_number - self.number - self.symbol)]
        else:
            if self.number >= self.sum_number:
                result_list = ["NumberGenerateController(%d)" % self.sum_number,
                               "SymbolGenerateController(%d)" % (self.sum_number - self.number)]
            else:
                result_list = ["NumberGenerateController(%d)" % self.number,
                               "SymbolGenerateController(%d)" % (self.sum_number - self.number)]
        return result_list

    def output_password(self):
        """
            输出密码
        :return: 密码 str
        """
        result_list = []
        for item in self.__password_config:
            result_list.extend(eval(item).generate())
        random.shuffle(result_list)
        str_password = "".join(result_list)
        return str_password


class PasswordView:
    """
        密码生成视图
    """
    def __input_condition(self):
        """
            输入条件
        :return: 返回密码 str
        """
        sum_num = self.__input_sum_num()
        you_num = self.__input_you_num()
        you_symbol = self.__input_you_symbol()
        re = PasswordController(sum_num, you_num, you_symbol)
        return re.output_password()

    def __input_sum_num(self):
        """
            输入生成密码的总位数
        """
        sum_num = input("请您输入4~84之间的一个数字，系统将为您生成一个密码：\n")
        if sum_num.isdigit() and 4 <= int(sum_num) <= 84:
            return int(sum_num)
        raise ValueError("输入的内容与要求不符!")

    def __input_you_num(self):
        """
            输入生成密码中需要有几位数字
        """
        you_num = input("输入0~10之间的一个数字，将决定密码中有“数字”数量：\n")
        if you_num.isdigit() and 0 <= int(you_num) <= 10:
            return int(you_num)
        raise ValueError("输入的数字内容与要求不符!")

    def __input_you_symbol(self):
        """
            输入生成密码中需要有几位特殊字符
        """
        you_symbol = input("输入0~10之间的一个数字，将决定密码中有“字符”数量：\n")
        if you_symbol.isdigit() and 0 <= int(you_symbol) <= 10:
            return int(you_symbol)
        raise ValueError("输入的字符内容与要求不符!")

    def __print_password(self):
        """
            打印密码
        """
        result_password = self.__input_condition()
        print("\n您获得的密码为：\033[33m%s\033[0m" % result_password)

    def main(self):
        """
            总入口
        """
        self.__print_password()


view = PasswordView()
view.main()



